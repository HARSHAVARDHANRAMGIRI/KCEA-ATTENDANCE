// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  role          Role
  phone         String   @unique
  name          String
  email         String?  @unique
  rollNumber    String?  @unique
  departmentId  String?
  department    Department? @relation(fields: [departmentId], references: [id])
  deviceCount   Int      @default(0)
  isActive      Boolean  @default(true)
  
  // Auth fields
  otpHash       String?
  otpExpiresAt  DateTime?
  lastLoginAt   DateTime?
  
  // Relations
  enrollments   Enrollment[]
  sections      Section[]    @relation("FacultyClasses")
  attendance    Attendance[]
  sessions      Session[]    @relation("SessionCreator")
  auditLogs     AuditLog[]
  
  @@map("users")
}

enum Role {
  student
  faculty
  admin
  
  @@map("roles")
}

model Department {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String    @unique
  code      String    @unique
  isActive  Boolean   @default(true)
  
  // Relations
  programs  Program[]
  users     User[]
  
  @@map("departments")
}

model Program {
  id           String     @id @default(cuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  name         String
  code         String     @unique
  duration     Int        // in years
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  isActive     Boolean    @default(true)
  
  // Relations
  courses      Course[]
  
  @@map("programs")
}

model Course {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  code        String    @unique
  title       String
  credits     Int       @default(3)
  semester    Int
  programId   String
  program     Program   @relation(fields: [programId], references: [id])
  isActive    Boolean   @default(true)
  
  // Relations
  sections    Section[]
  
  @@map("courses")
}

model Section {
  id          String    @id @default(cuid())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  courseId    String
  course      Course    @relation(fields: [courseId], references: [id])
  facultyId   String
  faculty     User      @relation("FacultyClasses", fields: [facultyId], references: [id])
  academicYear String
  semester    Int
  
  // Schedule and settings
  schedule    Json      // meeting days, times, room
  settings    Json      // geofence, attendance rules, etc.
  isActive    Boolean   @default(true)
  
  // Relations
  sessions    Session[]
  enrollments Enrollment[]
  
  @@unique([courseId, name, academicYear, semester])
  @@map("sections")
}

model Enrollment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studentId String
  student   User     @relation(fields: [studentId], references: [id])
  sectionId String
  section   Section  @relation(fields: [sectionId], references: [id])
  
  @@unique([studentId, sectionId])
  @@map("enrollments")
}

model Session {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  sectionId   String
  section     Section  @relation(fields: [sectionId], references: [id])
  createdById String
  createdBy   User     @relation("SessionCreator", fields: [createdById], references: [id])
  
  // Session details
  title       String
  description String?
  scheduledAt DateTime
  startedAt   DateTime?
  endedAt     DateTime?
  status      SessionStatus @default(scheduled)
  
  // Attendance settings
  qrCode      String?
  qrExpiresAt DateTime?
  geofence    Json?     // lat, lng, radius
  
  // Relations
  attendance  Attendance[]
  
  @@map("sessions")
}

enum SessionStatus {
  scheduled
  active
  ended
  cancelled
  
  @@map("session_status")
}

model Attendance {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  studentId   String
  student     User     @relation(fields: [studentId], references: [id])
  sessionId   String
  session     Session  @relation(fields: [sessionId], references: [id])
  
  // Attendance details
  status      AttendanceStatus
  markedAt    DateTime
  method      AttendanceMethod
  location    Json?    // lat, lng if geofenced
  deviceInfo  Json?    // device fingerprint
  notes       String?
  
  @@unique([studentId, sessionId])
  @@map("attendance")
}

enum AttendanceStatus {
  present
  absent
  late
  excused
  
  @@map("attendance_status")
}

enum AttendanceMethod {
  qr_code
  geofence
  manual
  otp
  
  @@map("attendance_method")
}

model AuditLog {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  userId    String?
  user      User?    @relation(fields: [userId], references: [id])
  
  // Log details
  action    String
  resource  String
  resourceId String?
  details   Json?
  ipAddress String?
  userAgent String?
  
  @@map("audit_logs")
}

// Note: Indexes are defined within each model using @@index
